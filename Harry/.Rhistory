lab= (round(MOR$estimate[1],3))
pvalue = MOR$p.value
a=data.frame(var=names[i],moran=lab, p.value=pvalue)
Moran.s_I<-rbind(Moran.s_I,a)
}
Moran.s_I<-Moran.s_I[-1,]
tail(Moran.s_I)
Moran.s_I
filter(Moran.s_I,p.value < 0.1)
#cpi <- st_read("Shape file CPI/82 cpi foodstuffs point.shp")
#cpi <- st_read("Shape file CPI/82 cpi procfood point.shp")
#cpi <- st_read("Shape file CPI/82 cpi housing point.shp")
#cpi <- st_read("Shape file CPI/82 cpi health point.shp")
#cpi <- st_read("Shape file CPI/82 cpi clothing point.shp")
#cpi <- st_read("Shape file CPI/82 cpi education point.shp")
cpi <- st_read("Shape file CPI/82 cpi transport point.shp")
#cpi <- st_read("Shape file CPI/82 cpi general.shp")
cpi.df <- as.data.frame(cpi)
# (a) coordinates and IDs
#coords <- cpi[,c("X", "Y")]
#coords <- coordinates(coords)
IDs <- cpi$IDCity
# (b) identify neighbors given the distance threshold
nearneigh4 <- knearneigh(cpi, k=4)
summary(nearneigh4)
# (c) calculate the spatial weights matrix
W.matrixnearest <- nb2listw(knn2nb(nearneigh4))
summary(W.matrixnearest)
names=c()
names <- colnames(cpi.df)
Moran.s_I=data.frame(var="a",moran=0, p.value=0)
for (i in 12:83) {
MOR<- moran.test(cpi.df[,i],W.matrixnearest)
lab= (round(MOR$estimate[1],3))
pvalue = MOR$p.value
a=data.frame(var=names[i],moran=lab, p.value=pvalue)
Moran.s_I<-rbind(Moran.s_I,a)
}
Moran.s_I<-Moran.s_I[-1,]
tail(Moran.s_I)
Moran.s_I
filter(Moran.s_I,p.value < 0.1)
cpi <- st_read("Shape file CPI/82 cpi foodstuffs point.shp")
#cpi <- st_read("Shape file CPI/82 cpi procfood point.shp")
#cpi <- st_read("Shape file CPI/82 cpi housing point.shp")
#cpi <- st_read("Shape file CPI/82 cpi health point.shp")
#cpi <- st_read("Shape file CPI/82 cpi clothing point.shp")
#cpi <- st_read("Shape file CPI/82 cpi education point.shp")
#cpi <- st_read("Shape file CPI/82 cpi transport point.shp")
#cpi <- st_read("Shape file CPI/82 cpi general.shp")
cpi.df <- as.data.frame(cpi)
# (a) coordinates and IDs
#coords <- cpi[,c("X", "Y")]
#coords <- coordinates(coords)
IDs <- cpi$IDCity
# (b) identify neighbors given the distance threshold
nearneigh4 <- knearneigh(cpi, k=4)
summary(nearneigh4)
# (c) calculate the spatial weights matrix
W.matrixnearest <- nb2listw(knn2nb(nearneigh4))
summary(W.matrixnearest)
names=c()
names <- colnames(cpi.df)
Moran.s_I=data.frame(var="a",moran=0, p.value=0)
for (i in 12:83) {
MOR<- moran.test(cpi.df[,i],W.matrixnearest)
lab= (round(MOR$estimate[1],3))
pvalue = MOR$p.value
a=data.frame(var=names[i],moran=lab, p.value=pvalue)
Moran.s_I<-rbind(Moran.s_I,a)
}
Moran.s_I<-Moran.s_I[-1,]
tail(Moran.s_I)
Moran.s_I
filter(Moran.s_I,p.value < 0.1)
# (a) coordinates and IDs
#coords <- cpi[,c("X", "Y")]
#coords <- coordinates(coords)
IDs <- cpi$IDCity
# (b) identify neighbors given the distance threshold
nb672km <- dnearneigh(cpi, d1=0, d2=672, row.names = IDs)
summary(nb672km)
# (c) calculate the spatial weights matrix
W.matrixdist <- nb2listw(nb672km)
summary(W.matrixdist)
#nb2listw(nb338km) #, zero.policy = TRUE)
#W.matrix <- nb2listw(nb338km,zero.policy = TRUE)
#summary(W.matrix)
?localG
localG(cpi.df$mo2014m6, W.matrixdist)
localG(cpi.df$mo2014m6, nb2listw(nb, style="B"), return_internals = T, GeoDa = T)
# (b) identify neighbors given the distance threshold
nb672km <- dnearneigh(cpi, d1=0, d2=672, row.names = IDs)
summary(nb672km)
# (c) calculate the spatial weights matrix
W.matrix <- nb2listw(nb672km)
summary(W.matrix)
?localG
localG(cpi.df$mo2014m6, W.matrix)
localG(cpi.df$mo2014m6, nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
for(jj in 1:10) {
nb <- dnearneigh(cpi, d1=0, d2=672+ 10*jj, longlat=T, row.names = IDs)
# Spatial filter for log.GDPPCPCXX or for RGDPPC20XX
cpigetis <- localG(cpi.df$mo2019m1, nb2listw(nb, style="B"), return_internals = T, GeoDa = T)
#the output is created so that it resembles the output of the PPA program
aj <- cbind(cpi.df$IDCity, cpigetis )
aj<- as.data.frame(aj)
aj
n= c(NA, NA)
m= c(jj, NA)
nm<-  data.frame( n,m )
names(nm)[1] <- "V1"
names(nm)[2] <- "cpigetis"
aj <- rbind( nm, aj)
s2.df<- rbind(s2.df, aj)
}
s2.df <- data.frame( V1=0, cpigetis= 0)
s2.df
for(jj in 1:10) {
nb <- dnearneigh(cpi, d1=0, d2=672+ 10*jj, longlat=T, row.names = IDs)
# Spatial filter for log.GDPPCPCXX or for RGDPPC20XX
cpigetis <- localG(cpi.df$mo2019m1, nb2listw(nb, style="B"), return_internals = T, GeoDa = T)
#the output is created so that it resembles the output of the PPA program
aj <- cbind(cpi.df$IDCity, cpigetis )
aj<- as.data.frame(aj)
aj
n= c(NA, NA)
m= c(jj, NA)
nm<-  data.frame( n,m )
names(nm)[1] <- "V1"
names(nm)[2] <- "cpigetis"
aj <- rbind( nm, aj)
s2.df<- rbind(s2.df, aj)
}
s2.df <- s2.df[-1,]
#
head(s2.df)
tail(s2.df)
#
?localG
localG(cpi.df$mo2014m3, W.matrix)
localG(cpi.df$mo2014m3, nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
for(jj in 1:1) {
nb <- dnearneigh(cpi, d1=0, d2=672+ 10*jj, longlat=T, row.names = IDs)
# Spatial filter for log.GDPPCPCXX or for RGDPPC20XX
cpigetis <- localG(cpi.df$mo2014m3, nb2listw(nb, style="B"), return_internals = T, GeoDa = T)
#the output is created so that it resembles the output of the PPA program
aj <- cbind(cpi.df$IDCity, cpigetis )
aj<- as.data.frame(aj)
aj
n= c(NA, NA)
m= c(jj, NA)
nm<-  data.frame( n,m )
names(nm)[1] <- "V1"
names(nm)[2] <- "cpigetis"
aj <- rbind( nm, aj)
s2.df<- rbind(s2.df, aj)
}
s2.df <- s2.df[-1,]
#
head(s2.df)
tail(s2.df)
#
s2.df
s2.df <- data.frame( V1=0, cpigetis= 0)
s2.df
for(jj in 1:1) {
nb <- dnearneigh(cpi, d1=0, d2=672+ 10*jj, longlat=T, row.names = IDs)
# Spatial filter for log.GDPPCPCXX or for RGDPPC20XX
cpigetis <- localG(cpi.df$mo2014m3, nb2listw(nb, style="B"), return_internals = T, GeoDa = T)
#the output is created so that it resembles the output of the PPA program
aj <- cbind(cpi.df$IDCity, cpigetis )
aj<- as.data.frame(aj)
aj
n= c(NA, NA)
m= c(jj, NA)
nm<-  data.frame( n,m )
names(nm)[1] <- "V1"
names(nm)[2] <- "cpigetis"
aj <- rbind( nm, aj)
s2.df<- rbind(s2.df, aj)
}
s2.df <- s2.df[-1,]
#
head(s2.df)
tail(s2.df)
#
s2.df
cpigetis <- localG(cpi.df$mo2014m3, nb2listw(nb, style="B"), return_internals = T, GeoDa = T)
cpigetis
cpigetis <- localG(cpi.df$mo2014m3, nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
cpigetis
for(jj in 1:1) {
nb <- dnearneigh(cpi, d1=0, d2=672+ 10*jj, longlat=T, row.names = IDs)
# Spatial filter for log.GDPPCPCXX or for RGDPPC20XX
cpigetis <- localG(cpi.df$mo2014m3, nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
#the output is created so that it resembles the output of the PPA program
aj <- cbind(cpi.df$IDCity, cpigetis )
aj<- as.data.frame(aj)
aj
n= c(NA, NA)
m= c(jj, NA)
nm<-  data.frame( n,m )
names(nm)[1] <- "V1"
names(nm)[2] <- "cpigetis"
aj <- rbind( nm, aj)
s2.df<- rbind(s2.df, aj)
}
s2.df <- s2.df[-1,]
#
head(s2.df)
tail(s2.df)
#
s2.df <- data.frame( V1=0, cpigetis= 0)
s2.df
for(jj in 1:1) {
nb <- dnearneigh(cpi, d1=0, d2=672+ 10*jj, longlat=T, row.names = IDs)
# Spatial filter for log.GDPPCPCXX or for RGDPPC20XX
cpigetis <- localG(cpi.df$mo2014m3, nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
#the output is created so that it resembles the output of the PPA program
aj <- cbind(cpi.df$IDCity, cpigetis )
aj<- as.data.frame(aj)
aj
n= c(NA, NA)
m= c(jj, NA)
nm<-  data.frame( n,m )
names(nm)[1] <- "V1"
names(nm)[2] <- "cpigetis"
aj <- rbind( nm, aj)
s2.df<- rbind(s2.df, aj)
}
s2.df <- s2.df[-1,]
#
head(s2.df)
tail(s2.df)
#
for(jj in 1:1) {
nb <- dnearneigh(cpi, d1=0, d2=672+ 10*jj, row.names = IDs)
# Spatial filter for log.GDPPCPCXX or for RGDPPC20XX
cpigetis <- localG(cpi.df$mo2014m3, nb2listw(nb, style="B"), return_internals = T, GeoDa = T)
#the output is created so that it resembles the output of the PPA program
aj <- cbind(cpi.df$IDCity, cpigetis )
aj<- as.data.frame(aj)
aj
n= c(NA, NA)
m= c(jj, NA)
nm<-  data.frame( n,m )
names(nm)[1] <- "V1"
names(nm)[2] <- "cpigetis"
aj <- rbind( nm, aj)
s2.df<- rbind(s2.df, aj)
}
s2.df <- s2.df[-1,]
#
head(s2.df)
tail(s2.df)
#
s2.df <- data.frame( V1=0, cpigetis= 0)
s2.df
for(jj in 1:30) {
nb <- dnearneigh(cpi, d1=0, d2=672+ 10*jj, row.names = IDs)
# Spatial filter for log.GDPPCPCXX or for RGDPPC20XX
cpigetis <- localG(cpi.df$mo2014m3, nb2listw(nb, style="B"), return_internals = T, GeoDa = T)
#the output is created so that it resembles the output of the PPA program
aj <- cbind(cpi.df$IDCity, cpigetis )
aj<- as.data.frame(aj)
aj
n= c(NA, NA)
m= c(jj, NA)
nm<-  data.frame( n,m )
names(nm)[1] <- "V1"
names(nm)[2] <- "cpigetis"
aj <- rbind( nm, aj)
s2.df<- rbind(s2.df, aj)
}
s2.df <- s2.df[-1,]
#
head(s2.df)
tail(s2.df)
#
s2.df
locg<- s2.df%>%
select(1,2)
locg
names(locg)[1] <- "point"
names(locg)[2] <- "getis"
locg
nump=82
numd=30
rows= (nump+2)*numd
rows
r<- c(1:rows)
for (n in seq_along(r)) {
for (j in 1:numd){
if ((nump+2)*(j-1)< n & n<= (nump+2)*j ) {
r[n]=328+ 10*j
}
}
}
df <- data.frame(cbind(locg, r))
df<- df %>%
select(point,getis,r) %>%
filter(!is.na(point)) %>%
mutate(getis= sqrt(getis*getis)) #just the absolute value of Gi is needed
df
s2.df <- data.frame( V1=0, cpigetis= 0)
s2.df
for(jj in 1:30) {
nb <- dnearneigh(cpi, d1=0, d2=662+ 10*jj, row.names = IDs)
# Spatial filter for log.GDPPCPCXX or for RGDPPC20XX
cpigetis <- localG(cpi.df$mo2014m3, nb2listw(nb, style="B"), return_internals = T, GeoDa = T)
#the output is created so that it resembles the output of the PPA program
aj <- cbind(cpi.df$IDCity, cpigetis )
aj<- as.data.frame(aj)
aj
n= c(NA, NA)
m= c(jj, NA)
nm<-  data.frame( n,m )
names(nm)[1] <- "V1"
names(nm)[2] <- "cpigetis"
aj <- rbind( nm, aj)
s2.df<- rbind(s2.df, aj)
}
s2.df <- s2.df[-1,]
#
head(s2.df)
tail(s2.df)
#
s2.df
locg<- s2.df%>%
select(1,2)
locg
names(locg)[1] <- "point"
names(locg)[2] <- "getis"
locg
r<- c(1:rows)
for (n in seq_along(r)) {
for (j in 1:numd){
if ((nump+2)*(j-1)< n & n<= (nump+2)*j ) {
r[n]=662+ 10*j
}
}
}
df <- data.frame(cbind(locg, r))
df<- df %>%
select(point,getis,r) %>%
filter(!is.na(point)) %>%
mutate(getis= sqrt(getis*getis)) #just the absolute value of Gi is needed
df
df <- df %>%
select(point,getis,r) %>%
spread (point,getis)
df
df
dfmat<- as.matrix(df)
dif= matrix(data=1000, nrow = numd-1, ncol = nump+1)
for (i in 1:(numd-10)) {
for (j in 1:(nump+1)) {
if ( dfmat[i+1,j]-dfmat[i,j]< -0.01  & dfmat[i+2,j]-dfmat[i,j]< -0.01 & dfmat[i+3,j]-dfmat[i,j] < -0.01 & dfmat[i+4,j]-dfmat[i,j] < -0.01 ) {
dif[i,j]<- dfmat[i,1]
}
}
}
#deleted this line in the if condition  && dfmat[i+2,j]-dfmat[i+1,j] < -0.1
#&& dfmat[i+2,j]-dfmat[i+1,j] <= 0
difframe<-as.data.frame(dif)
difframe
mind<- c(1:nump)
for (i in seq_along(mind)) {
mind[i]= min(dplyr::pull(difframe, i+1)) #Just the first of such values is needed
}
point<- c(1:nump)
hist2<- data.frame(cbind(point, mind))
#hist2
p<- hist2 %>%
filter(mind<1000) %>%
ggplot()+
geom_histogram(mapping = aes(x = mind), binwidth = 10)
p
library(plotly)
ggplotly(p)
hist2 %>%
filter(mind<1000) %>%
summarise(mean= mean(mind), median=median(mind), mode=mfv(mind))
?localG
localG(cpi.df$mo2014m3, W.matrix)
getis<- localG(cpi.df$mo2014m3, nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
getis
?localG
localG(cpi.df$mo2014m3, W.matrix)
getis<- localG(cpi.df$mo2014m3, nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
getis
?localG
localG(cpi.df$mo2014m3, W.matrix)
getis<- localG(cpi.df$mo2014m3, nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
getis
mo2014m1.g <- localG(cpi.df$mo2014m1, nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis.m2014m1 <- as.data.frame(attr(mo2014m1.g, which = "internals")) # retrieve "internals"
cpi.df$g.2014m1 <- cpi.df$mo2014m1 * (Getis.m2014m1$EG/Getis.m2014m1$G ) # "multiplicative filter"
filterd <- list()
for (i in 12:83) {
g <- localG(cpi.df[,i], nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis <- as.data.frame(attr(g, which = "internals"))
list[[i]] <- cpi.df[,i] * (Getis$EG/Getis$G ) # "multiplicative filter"
}
filterd <- list()
for (i in 12:12) {
g <- localG(cpi.df[,i], nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis <- as.data.frame(attr(g, which = "internals"))
list[[i]] <- cpi.df[,i] * (Getis$EG/Getis$G ) # "multiplicative filter"
}
filtered <- list()
for (i in 12:12) {
g <- localG(cpi.df[,i], nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis <- as.data.frame(attr(g, which = "internals"))
filtered[[i]] <- cpi.df[,i] * (Getis$EG/Getis$G ) # "multiplicative filter"
}
View(filtered)
filtered <- list()
for (i in 12:83) {
g <- localG(cpi.df[,i], nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis <- as.data.frame(attr(g, which = "internals"))
filtered[[i]] <- cpi.df[,i] * (Getis$EG/Getis$G ) # "multiplicative filter"
}
View(filtered)
filtered <- list()
for (i in 12:82) {
g <- localG(cpi.df[,i], nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis <- as.data.frame(attr(g, which = "internals"))
filtered[[i]] <- cpi.df[,i] * (Getis$EG/Getis$G ) # "multiplicative filter"
}
View(filtered)
cpi.df$IDCity
cpi.df[,7]
cbind(cpi.df[,7],filtered[[12]])
as.data.frame(cbind(cpi.df[,7],filtered[[12]]))
a<-cbind(cpi.df[,7])
a<-as.data.frame(a,filtered[[12]]))
a<-cbind(cpi.df[,7])
a<-as.data.frame(a,filtered[[12]])
a
a<-(cpi.df[,7])
a<-as.data.frame(a,filtered[[12]])
a
a<- cpi.df[,7]
a<-as.data.frame(a,filtered[[12]])
a
a=c()
a<- cpi.df[,7]
a<- as.data.frame(a,filtered[[12]])
a
a=c()
a<- cpi.df[,7]
a<- as.data.frame(cbind(a,filtered[[12]]))
a
filtered <- list()
a=c()
a<- cpi.df[,7]
a
for (i in 12:82) {
g <- localG(cpi.df[,i], nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis <- as.data.frame(attr(g, which = "internals"))
filtered[[i]] <- cpi.df[,i] * (Getis$EG/Getis$G ) # "multiplicative filter"
a<- as.data.frame(cbind(a,filtered[[i]]))
}
a
filtered <- list()
a=c()
a<- cpi.df[,7]
a
for (i in 12:82) {
g <- localG(cpi.df[,i], nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis <- as.data.frame(attr(g, which = "internals"))
filtered[[i]] <- cpi.df[,i] * (Getis$EG/Getis$G ) # "multiplicative filter"
a<- as.data.frame(cbind(a,filtered[[i]]))
colnames(a)[ncol(a)] <- colnames(cpi.df)[i]
}
a
filtered <- list()
a=c()
a<- cpi.df[,7]
a
for (i in 12:82) {
g <- localG(cpi.df[,i], nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis <- as.data.frame(attr(g, which = "internals"))
filtered[[i]] <- cpi.df[,i] * (Getis$EG/Getis$G ) # "multiplicative filter"
a<- as.data.frame(cbind(a,filtered[[i]]))
colnames(a)[ncol(a)] <- paste("f.",colnames(cpi.df)[i],sep = "_")
}
a
filtered <- list()
a=c()
a<- cpi.df[,7]
a
for (i in 12:82) {
g <- localG(cpi.df[,i], nb2listw(nb672km, style="B"), return_internals = T, GeoDa = T)
Getis <- as.data.frame(attr(g, which = "internals"))
filtered[[i]] <- cpi.df[,i] * (Getis$EG/Getis$G ) # "multiplicative filter"
a<- as.data.frame(cbind(a,filtered[[i]]))
colnames(a)[ncol(a)] <- paste("f",colnames(cpi.df)[i],sep = "_")
}
a
combined <- left_join(cpi.df,a, by.x = "IDCity", by.y="a")
combined <- left_join(cpi.df,a, by = c("IDCity" ="a"))
combined
View(combined)
combined_cpi_g <- left_join(cpi.df,a, by = c("IDCity" ="a"))
combined <- left_join(cpi.df,a, by = c("IDCity" ="a"))
combined
combined_cpi_g <- left_join(cpi.df,a, by = c("IDCity" ="a"))
combined
combined_cpi_g
